
  <body>
    <div class="container">
    <div id='map' data-test=<%= data[0].Location %> style=" position: absolute;
    top: 0;
    bottom: 0;
    width: 100%;"></div>
    <div id='instructions' style=" position: absolute;
    margin: 20px;
    width: 25%;
    top: 0;
    bottom: 20%;
    padding: 20px;
    background-color: rgba(255, 255, 255, 0.9);
    overflow-y: scroll;
    font-family: sans-serif;
    font-size: 0.8em;
    line-height: 2em;" ></div>
    <script>
      var vali = document.getElementById('map').dataset.test;
      var vale = vali.split(',');
      var v1 = parseFloat(vale[0]);
      var v2 = parseFloat(vale[1]);
      var val = new Array(v1,v2);
      console.log( v1,v2);
mapboxgl.accessToken = 'pk.eyJ1IjoiYWJoaXNoZWtqIiwiYSI6ImNrajVxZzdrbTYwNjUycmxiNTJ0NzdodnoifQ.fe1hwLmFGZGPWs7g_cdIiQ';
var map = new mapboxgl.Map({
  container: 'map',
  style: 'mapbox://styles/mapbox/streets-v10',
  center: [77.49887286136960,12.924475707201630], // starting position
  zoom: 12
});
// set the bounds of the map
var bounds = [[ 77.30,12.910], [ 77.60,13.01]];
map.setMaxBounds(bounds);

// initialize the map canvas to interact with later
var canvas = map.getCanvasContainer();

// an arbitrary start will always be the same
// only the end or destination will change
var start = [77.49887286136978,12.924475707201646];
// create a function to make a directions request
function getRoute(end) {
  // make a directions request using cycling profile
  // an arbitrary start will always be the same
  // only the end or destination will change
  var start = [77.49887286136978,12.924475707201646];
  //console.log(end[0],end[1]);
  var url = 'https://api.mapbox.com/directions/v5/mapbox/walking/' + start[0] + ',' + start[1] + ';' + end[0] + ',' + end[1] + '?steps=true&geometries=geojson&access_token=' + mapboxgl.accessToken;
  //console.log(url);
  // make an XHR request https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest
  var req = new XMLHttpRequest();
  req.open('GET', url, true);
  req.onload = function() {
    var json = JSON.parse(req.response);
    var data = json.routes[0];
    var route = data.geometry.coordinates;
    var geojson = {
      type: 'Feature',
      properties: {},
      geometry: {
        type: 'LineString',
        coordinates: route
      }
    };
    // if the route already exists on the map, reset it using setData
    if (map.getSource('route')) {
      map.getSource('route').setData(geojson);
    } else { // otherwise, make a new request
      map.addLayer({
        id: 'route',
        type: 'line',
        source: {
          type: 'geojson',
          data: {
            type: 'Feature',
            properties: {},
            geometry: {
              type: 'LineString',
              coordinates: geojson
            }
          }
        },
        layout: {
          'line-join': 'round',
          'line-cap': 'round'
        },
        paint: {
          'line-color': '#3887be',
          'line-width': 5,
          'line-opacity': 0.75
        }
      });
    }
    var instructions = document.getElementById('instructions');
var steps = data.legs[0].steps;

var tripInstructions = [];
for (var i = 0; i < steps.length; i++) {
  tripInstructions.push('<br><li>' + steps[i].maneuver.instruction) + '</li>';
  instructions.innerHTML = '<br><h1 class="duration">Trip duration: ' + Math.floor(data.duration / 60) + ' min ðŸš´ </h1>' + tripInstructions;
}
  };
  req.send();
}

map.on('load', function() {
  // make an initial directions request that
  // starts and ends at the same location
  getRoute(start);

  // Add starting point to the map
  map.addLayer({
    id: 'point',
    type: 'circle',
    source: {
      type: 'geojson',
      data: {
        type: 'FeatureCollection',
        features: [{
          type: 'Feature',
          properties: {},
          geometry: {
            type: 'Point',
            coordinates: start
          }
        }
        ]
      }
    },
    paint: {
      'circle-radius': 10,
      'circle-color': '#3887be'
    }
  });
  
map.addLayer({
      id: 'end',
      type: 'circle',
      source: {
        type: 'geojson',
        data: {
          type: 'FeatureCollection',
          features: [{
            type: 'Feature',
            properties: {},
            geometry: {
              type: 'Point',
              coordinates:val
            }
          }]
        }
      },
      paint: {
        'circle-radius': 10,
        'circle-color': '#f30'
      }
    });
  getRoute(val);
});
</script>
</div>
  </body>